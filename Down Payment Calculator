{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What is the cost of your dream home? 350000\n",
      "What is your annual salary? 50000\n",
      "How much of your monthly salary do you want to save? (E.g. 0.5 would mean half your salary): 0.5\n",
      "By making an investment with annual 4% ROI, you will make monthly returns of 6.94\n",
      "Therefore, you will need to save for approximately 41 months to make the down payment.\n"
     ]
    }
   ],
   "source": [
    "# DREAM HOME\n",
    "\n",
    "total_cost = float(input(\"What is the cost of your dream home? \"))\n",
    "\n",
    "down_payment = total_cost * 0.25\n",
    "\n",
    "\n",
    "\n",
    "# MONTHLY AND ANNUAL SALARY\n",
    "\n",
    "annual_salary = float(input(\"What is your annual salary? \"))\n",
    "\n",
    "monthly_salary = annual_salary / 12\n",
    "\n",
    "\n",
    "\n",
    "# MONTHLY AND ANNUAL SAVINGS\n",
    "\n",
    "percent_savings = float(input(\"How much of your monthly salary do you want to save? (E.g. 0.5 would mean half your salary): \"))\n",
    "\n",
    "monthly_savings = monthly_salary * percent_savings\n",
    "                            \n",
    "                              \n",
    "\n",
    "# MONTHLY AND ANNUAL RETURNS\n",
    "                              \n",
    "monthly_returns = monthly_savings * 0.04 / 12\n",
    "\n",
    "print(\"By making an investment with annual 4% ROI, you will make monthly returns of\", \"%.2f\" % monthly_returns)\n",
    "\n",
    "\n",
    "\n",
    "# TOTAL SAVINGS PER MONTH\n",
    "\n",
    "total_savings_per_month = monthly_savings + monthly_returns\n",
    "\n",
    "               \n",
    "    \n",
    "# TIME NEEDED\n",
    " \n",
    "time_in_months = down_payment / total_savings_per_month\n",
    "\n",
    "print(\"Therefore, you will need to save for approximately\", int(time_in_months), \"months to make the down payment.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Diagnosis: Hypochondriac\n"
     ]
    }
   ],
   "source": [
    "def symptoms(fever, stuffynose, rash):\n",
    "\n",
    "    if fever is False and stuffynose is False and rash is None:\n",
    "        print(\"Diagnosis: Hypochondriac\")\n",
    "            \n",
    "    elif fever is False and stuffynose is True and rash is None:\n",
    "        print(\"Diagnosis: Head cold\")\n",
    "        \n",
    "    elif fever is True and stuffynose is None and rash is True:\n",
    "        print(\"Diagnosis: Measles\")\n",
    "        \n",
    "    elif fever is True and stuffynose is None and rash is False:\n",
    "        print(\"Diagnosis: Flu\")\n",
    "        \n",
    "    else:\n",
    "        print(\"Error\")\n",
    "        \n",
    "        \n",
    "symptoms(fever=False, stuffynose=False, rash=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Choose list1, list2 or list3: list3\n",
      "21\n",
      "23\n",
      "25\n"
     ]
    }
   ],
   "source": [
    "list1 = [1,2,3,4,5]\n",
    "list2 = [11,12,13,14,15]\n",
    "list3 = [21,22,23,24,25]\n",
    "\n",
    "\n",
    "selected_list = input(\"Choose list1, list2 or list3: \")\n",
    "\n",
    "if selected_list == \"list1\":\n",
    "    selected_list = list1\n",
    "    for i in range(0,5,2):\n",
    "        print(selected_list[i])\n",
    "\n",
    "elif selected_list == \"list2\":\n",
    "    selected_list = list2\n",
    "    for i in range(0,5,2):\n",
    "        print(selected_list[i])\n",
    "        \n",
    "elif selected_list == \"list3\":\n",
    "    selected_list = list3\n",
    "    for i in range(0,5,2):\n",
    "        print(selected_list[i])\n",
    "        \n",
    "else:\n",
    "    print(\"Error\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Choose list1, list2 or list3: list3\n",
      "[22, 24]\n"
     ]
    }
   ],
   "source": [
    "list1 = [1,2,3,4,5]\n",
    "list2 = [11,12,13,14,15]\n",
    "list3 = [21,22,23,24,25]\n",
    "\n",
    "\n",
    "selected_list = input(\"Choose list1, list2 or list3: \")\n",
    "\n",
    "if selected_list == \"list1\":\n",
    "    selected_list = list1\n",
    "    filtered_list = filter(lambda x: x%2 == 0, selected_list)\n",
    "    print(list(filtered_list))\n",
    "\n",
    "elif selected_list == \"list2\":\n",
    "    selected_list = list2\n",
    "    filtered_list = filter(lambda x: x%2 == 0, selected_list)\n",
    "    print(list(filtered_list))\n",
    "        \n",
    "elif selected_list == \"list3\":\n",
    "    selected_list = list3\n",
    "    filtered_list = filter(lambda x: x%2 == 0, selected_list)\n",
    "    print(list(filtered_list))\n",
    "        \n",
    "else:\n",
    "    print(\"Error\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am being driven!\n"
     ]
    }
   ],
   "source": [
    "class Vehicle:\n",
    "    \n",
    "    def __init__(self, engine=\"A\", tires=4):\n",
    "        self.engine = engine\n",
    "        self.tires = tires\n",
    "        \n",
    "    def drive(self):\n",
    "        print(\"I am being driven!\")\n",
    "        \n",
    "# Test case\n",
    "v1 = Vehicle()\n",
    "v1.drive()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I am being driven!\n",
      "I can sit 2 people!\n",
      "Person 1: Mike , Person 2: Peter\n"
     ]
    }
   ],
   "source": [
    "class Motorbike(Vehicle):\n",
    "    \n",
    "    def __init__(self, name, engine, tires=2):\n",
    "        self.name = name\n",
    "        self.engine = engine\n",
    "        self.tires = tires\n",
    "    \n",
    "    def seats(self):\n",
    "        print(\"I can sit 2 people!\")\n",
    "        \n",
    "    def __add__(self, other):\n",
    "        #print(self.name + other.name)\n",
    "        print(\"Person 1:\", v2.name, \", Person 2:\", v3.name)\n",
    "    \n",
    "v2 = Motorbike(\"Mike\", \"B\")\n",
    "v3 = Motorbike(\"Peter\", \"C\")\n",
    "\n",
    "v2.drive()\n",
    "v2.seats()\n",
    "v2+v3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus Question"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is a sedan\n",
      "I am a seat\n"
     ]
    }
   ],
   "source": [
    "def sedan_decorator(func):\n",
    "    \n",
    "    def wrapper(x):\n",
    "        print(\"This is a sedan\")\n",
    "        func(x)\n",
    "    return wrapper\n",
    "\n",
    "\n",
    "class Sedan(Vehicle):\n",
    "    @sedan_decorator\n",
    "    def seats(self):\n",
    "        print(\"I am a seat\")\n",
    "        \n",
    "    \n",
    "v4 = Sedan()\n",
    "v4.seats()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
